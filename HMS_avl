#include <bits/stdc++.h>
using namespace std;

std::string generate(int n)// n is size of the random string
{
  std::string result{};
  result.reserve(n);
  for (int i = 0; i < n; i++)
  {
    int g = std::rand()%25;
    char d = static_cast<char> (g + 'a'); // generating random char
    result.push_back(d);
  }
  return result;
}

void line(){
    cout<<"\n--------------------------------------------------------------------------------------------------------------------------------------------------";
}

struct hospital{
    string pname;
    char gender;
    long Inc_id;
    int age;
    long phone;
    string email;
};

struct avl
{
    int key;
    hospital val;
    avl* lchild;
    avl* rchild;
    int height;
};

class AVLTree
{
    public:
        AVLTree()
        {
        }

        int height(avl* node)
        {
            if (node == NULL)
                return 0;
            else
                return node->height;
        }

        int max(int a, int b)
        {
            return (a > b) ? a : b;
        }

        avl* new_node(int key, hospital h)
        {
            avl* node = new avl;
            node->key = key;
            node->val.pname = h.pname;
            node->val.age = h.age;
            node->val.phone = h.phone;
            node->val.email = h.email;
            node->val.gender = h.gender;
            node->val.Inc_id = h.Inc_id;
            node->lchild = NULL;
            node->rchild = NULL;
            node->height = 1;
            return node;
        }

        avl* right_rotate(avl* y)
        {
            avl* x = y->lchild;
            avl* T2 = x->rchild;

            // Perform rotation
            x->rchild = y;
            y->lchild = T2;

            // Update heights
            y->height = max(height(y->lchild), height(y->rchild)) + 1;
            x->height = max(height(x->lchild), height(x->rchild)) + 1;

            // Return new root
            return x;
        }

        avl* left_rotate(avl* x)
        {
            avl* y = x->rchild;
            avl* T2 = y->lchild;

            // Perform rotation
            y->lchild = x;
            x->rchild = T2;

            // Update heights
            x->height = max(height(x->lchild), height(x->rchild)) + 1;
            y->height = max(height(y->lchild), height(y->rchild)) + 1;

            // Return new root
            return y;
        }

        int get_balance(avl* node)
        {
            if (node == NULL)
                return 0;
            else
                return height(node->lchild) - height(node->rchild);
        }

        avl* insert(int key, hospital h, avl* node)
        {
            // Perform the normal BST insertion
            if (node == NULL)
                return new_node(key, h);

            if (key < node->key)
                node->lchild = insert(key, h, node->lchild);
            else if (key > node->key)
                node->rchild = insert(key, h, node->rchild);
            else
                return node;

            // Update height of this node
            node->height = 1 + max(height(node->lchild), height(node->rchild));

            // Get the balance factor of this node
            int balance = get_balance(node);

            // Left Left Case
            if (balance > 1&& key < node->lchild->key)
            {
            return right_rotate(node);
            }
                    // Right Right Case
        if (balance < -1 && key > node->rchild->key)
        {
            return left_rotate(node);
        }

        // Left Right Case
        if (balance > 1 && key > node->lchild->key)
        {
            node->lchild = left_rotate(node->lchild);
            return right_rotate(node);
        }

        // Right Left Case
        if (balance < -1 && key < node->rchild->key)
        {
            node->rchild = right_rotate(node->rchild);
            return left_rotate(node);
        }

        // return the (unchanged) node pointer
        return node;
    }

    avl* min_value_node(avl* node)
    {
        avl* current = node;
        while (current->lchild != NULL)
            current = current->lchild;
        return current;
    }

    avl* delete_node(int key, avl* root)
    {
        if (root == NULL)
            return root;

        if (key < root->key)
            root->lchild = delete_node(key, root->lchild);
        else if (key > root->key)
            root->rchild = delete_node(key, root->rchild);
        else
        {
            if ((root->lchild == NULL) || (root->rchild == NULL))
            {
                avl* temp = root->lchild ? root->lchild : root->rchild;

                if (temp == NULL)
                {
                    temp = root;
                    root = NULL;
                }
                else
                    *root = *temp;

                free(temp);
            }
            else
            {
                avl* temp = min_value_node(root->rchild);

                root->key = temp->key;
                root->val = temp->val;

                root->rchild = delete_node(temp->key, root->rchild);
            }
        }

        if (root == NULL)
            return root;

        // Update height of the current node
        root->height = 1 + max(height(root->lchild), height(root->rchild));

        // Get the balance factor of this node
        int balance = get_balance(root);

        // Left Left Case
        if (balance > 1 && get_balance(root->lchild) >= 0)
            return right_rotate(root);

        // Left Right Case
        if (balance > 1 && get_balance(root->lchild) < 0)
        {
            root->lchild = left_rotate(root->lchild);
            return right_rotate(root);
        }

        // Right Right Case
        if (balance < -1 && get_balance(root->rchild) <= 0)
            return left_rotate(root);

        // Right Left Case
        if (balance < -1 && get_balance(root->rchild) > 0)
        {
            root->rchild = right_rotate(root->rchild);
            return left_rotate(root);
        }

        return root;
    }
    
    avl* Search(int key, avl* node){
        if(node==NULL){
            cout<<"not found";
            return node;
        }
        if(key==node->key){
            return node;
        }
        else if(key>node->key){
            return Search(key,node->rchild);
        }
        else{
            return Search(key,node->lchild);
        }
    }

    void inorder(avl* node)
    {
        if (node != NULL)
        {
            inorder(node->lchild);
            cout <<node->key<<setw(15) <<node->val.pname << setw(15)  <<node->val.phone  <<  setw(15)  << node->val.email << setw(15)  << node->val.gender << setw(15)  <<  node->val.Inc_id <<endl;
            inorder(node->rchild);
        }
    }
};

int main()
{   
    cout<<"\n\n\n";
    line();
    line();
    line();
    cout<<"\nADSA PROJECT\n\n";
    cout<<"By Elizabeth Jees Tharayil 106121039, Kavimalar Subbiah 106121059";
    cout<<"\n\nUsing AVL Tree";
    line();
    cout<<"\nPress Any key to continue";
    getchar();
    system("clear");
    AVLTree tree;
    avl *root;
    avl *node;
    root = NULL;
    const int length = 10;
    int i;
    int choice;
    hospital h;
    
    //INSERTING SOME VALUES
    for(int i = 0; i < 100;i++){
        int key = rand()%1000;
        h.pname = generate(rand()%12);
        h.age = rand()%100;
        h.Inc_id = rand()%100000;
        if(rand()%2==0)h.gender='F';
        else{
            h.gender='M';
        }
    
        h.email = generate(rand()%10);
        h.email+="@test.com";
        h.phone = 0;
        for(int i = 0; i < 10; i++){
            h.phone+=rand()%10;
            h.phone*=10;
        }
        h.phone/=10;
        root = tree.insert(key,h,root);
        
        //cout<<key<<endl;
    }
    cout<<"100 elements inputted"<<endl;
    double time_taken_search;
    clock_t start, end;
    while(1)
    {   

        cout<<"\n\n\t\t\tHOSPITAL MANAGEMENT SYSTEM\n\n";
        line();
        cout<<endl;

        cout<<"1. Insert Patient"<<endl;
        cout<<"2. Delete Patient"<<endl;
        cout<<"3. Search Patient"<<endl;
        cout<<"4. Display All patient details stored in the Database"<<endl;
        cout<<"5. Exit Program"<<endl;
        line();
        cout<<"\nEnter your choice: ";
        cin>>choice;
        cout<<"\n";
    
        int input;
        switch(choice)
        {
        case 1:
            system("clear");
            line();
            cout<<"\n\t\t\t\tPatient Details Input Page";
            line();
            cout<<"\nEnter Patient number to be inserted( Eg 4): ";
            cin>>input;
            cout<<"\nEnter Patient name( Eg John ):";
            cin>>h.pname;
            cout<<"\nEnter Patient Age( Eg 19 ):";
            cin>>h.age;
            cout<<"\nEnter Insurance ID( 6 digits ):";
            cin>>h.Inc_id;
            cout<<"\nEnter Patient Gender( M/F ):";
            cin>>h.gender;
            cout<<"\nEnter Patient Email( abc@xyz.com ):";
            cin>>h.email;
            cout<<"\nEnter Patient Phone No( 10 digits ):";
            cin>>h.phone;
            root = tree.insert(input,h,root);
            cout<<"\nAfter Insert: "<<input<<endl;
            tree.inorder(root);
            getchar();
            break;
        case 2:
            system("clear");
            line();
            cout<<"\n\t\t\t\tPatient Details removal Page";
            line();
            cout<<"\nEnter Patient to be deleted-:";
            cin>>input;
            root = tree.delete_node(input, root);
            cout<<"\nAfter Delete: "<<input<<endl;
            cout<<"\nInorder of current tree:\n";
            tree.inorder(root);
            getchar();
            break;
            
        case 3:
            system("clear");
            line();
            cout<<"\n\t\t\t\tPatient Detail search Page";
            line();
            cout<<"\nEnter Patient No to be searched: ";
            cin>>input;
            start = clock();
            node = tree.Search(input, root);
            end = clock();
            time_taken_search = double(end - start);
            if(node->key == input){
                cout<<"\nElement to be searched is found";
                cout<<"\nAfter Search "<<input<<endl;
                cout<<"name: "<<(node->val).pname<<endl;
                cout<<"phone: "<<(node->val).phone<<endl;
                cout<<"email: "<<(node->val).email<<endl;
                cout<<"gender: "<<(node->val).gender<<endl;
                cout<<"Insurance ID: "<<(node->val).Inc_id<<endl<<endl;
                cout<<"Time taken to search: "<<time_taken_search<<endl;
            }
            else{
                cout<<"Element Not found";
            }
            getchar();
            break;
 
        
        case 4:
            system("clear");
            cout<<setw(49)<<"PATIENT DETAILS\n";
            line();
            cout<<"\n";
            cout<<setw(15)<<"Patient No"<<setw(15)<<"Name"<<setw(15)<<"Phone"<<setw(15)<<"Email"<<setw(15)<<"Gender"<<setw(15)<<"Inc_id";
            line();
            cout<<"\n";
            tree.inorder(root);
            getchar();
            break;
        case 5:
            exit(1);
            break;
        default:
            cout<<"\nInvalid type! \n";
        }
    }
    cout<<"\n";
    return 0;
}
